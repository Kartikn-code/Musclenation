(testenv) D:\django_project\musclenation>python manage.py shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from . import *
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: "'__name__' not in globals"
>>> from login.models import *
>>> from blogapp.models import *
>>> c=Credentials.objects.all()
>>> c
<QuerySet []>
>>> c
<QuerySet [<Credentials: admin, admin>]>
>>> c
<QuerySet [<Credentials: admin, admin>, <Credentials: test, test>, <Credentials: rule, rule>, <Credentials: demo, demo>]>
>>> filter_one=Credentials.objects.filter(username='admin')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1476, in filter
    return self._filter_or_exclude(False, args, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1494, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1501, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1613, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1645, in _add_q
    child_clause, needed_inner = self.build_filter(
                                 ^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1495, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1307, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1772, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'username' into field. Choices are: Password, Username, id
>>> filter_one=Credentials.objects.filter(Username='admin')
>>> filter_one
<QuerySet [<Credentials: admin, admin>]>
>>> filter_tewo=Credentials.objects.filter(id=2)
>>> filter_tewo
<QuerySet []>
>>> c=Credentials.objects.all().delete()
>>> c
(5, {'login.Credentials': 5})
>>> c
(5, {'login.Credentials': 5})
>>> c=Credentials.objects.all()
>>> c
<QuerySet [<Credentials: admin, admin>, <Credentials: test, test>]>
>>> c=Product.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Product' is not defined
>>> c=Productd.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Productd' is not defined
>>> c=Products.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Products' is not defined
>>> cls
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'cls' is not defined
>>> clear
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'clear' is not defined
>>> from login.models import *
>>> c=Productd.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Productd' is not defined
>>> c=Product.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Product' is not defined
>>>
>>>
>>>
>>> exit
Use exit() or Ctrl-Z plus Return to exit
>>>
>>>
>>>
>>>
>>> from login.models import *
>>> from blogapp.models import *
>>> c=Product.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Product' is not defined
>>> exit()

(testenv) D:\django_project\musclenation>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
May 13, 2024 - 17:49:40
Django version 5.0.2, using settings 'musclenation.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.


(testenv) D:\django_project\musclenation>

(testenv) D:\django_project\musclenation>

(testenv) D:\django_project\musclenation>

(testenv) D:\django_project\musclenation>python manage.py shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>>
>>> from login.models import *
>>> c=Products.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Products' is not defined
>>> c=Product.objects.all()
>>> c
<QuerySet [<Product: Dell W series L:aptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>> filter_cat=Product.objects.filter(productCategory='Laptop')
>>> filter_cat
<QuerySet [<Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>]>
>>> filter_cat
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>]>
>>> filter_cat=Product.objects.filter(productCategory='Mobile')
>>> filter_cat
<QuerySet [<Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>> import Q
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ModuleNotFoundError: No module named 'Q'
>>> from django.db.models import Q
>>> filter_cat=Product.objects.filter(Q(productCategory='l'))
>>> filter_cat
<QuerySet []>
>>> filter_cat=Product.objects.filter(Q(productCategory='L'))
>>> filter_cat
<QuerySet []>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop') | Q (productCategory='Mobile'))
>>> filter_cat
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop') && Q (productCategory='Mobile'))
  File "<console>", line 1
    filter_cat=Product.objects.filter(Q(productCategory='Laptop') && Q (productCategory='Mobile'))
                                                                   ^
SyntaxError: invalid syntax
>>> filter_cat
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>>
>>>
>>>
>>>
>>> filter_cat
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>>
>>>
>>> filter_cat
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: Samsung X series Mobile 12000.0 Samsung 1 year>]>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop') & Q (productCategory='Mobile'))
>>>
>>> filter_cat
<QuerySet []>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list('productName','productPrice')
>>> filter_cat
<QuerySet [('Dell W series', 50000.0), ('Macbook Pro M3', 200000.0)]>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list('id', 'productName','productPrice')
>>> filter_cat
<QuerySet [(1, 'Dell W series', 50000.0), (2, 'Macbook Pro M3', 200000.0)]>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list('id', 'productName','productPrice', flat=True)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1368, in values_list
    raise TypeError(
TypeError: 'flat' is not valid when values_list is called with more than one field.
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list('id', flat=True)
>>> filter_cat
<QuerySet [1, 2]>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list(['id','productName'], flat=True)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1373, in values_list
    field_names = {f for f in fields if not hasattr(f, "resolve_expression")}
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1373, in <setcomp>
    field_names = {f for f in fields if not hasattr(f, "resolve_expression")}
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: unhashable type: 'list'
>>> filter_cat
<QuerySet [1, 2]>
>>>
>>> filter_cat=Product.objects.filter(Q(productCategory='Laptop')).values_list('id', flat=True)
>>> filter_cat_name=Product.objects.filter(Q(productCategory='Laptop')).values_list('productName', flat=True)
>>> filter_cat
<QuerySet [1, 2]>
>>> filter_cat_name
<QuerySet ['Dell W series', 'Macbook Pro M3']>
>>> res=zip(filter_cat,filter_cat_name)
>>> res
<zip object at 0x000001D565CB7640>
>>> res=list(zip(filter_cat,filter_cat_name))
>>> res
[(1, 'Dell W series'), (2, 'Macbook Pro M3')]
>>> obj=Product.objects.all()
>>> obj.filter(productCategory='Laptop')
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>]>
>>> obj.values_list('productCategory'='Laptop')
  File "<console>", line 1
    obj.values_list('productCategory'='Laptop')
                    ^^^^^^^^^^^^^^^^^^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
>>> obj.values_list('productCategory'=='Laptop')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1392, in values_list
    clone = self._values(*_fields, **expressions)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1355, in _values
    clone.query.set_values(fields)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 2502, in set_values
    self.add_fields(field_names, True)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 2200, in add_fields
    name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m
    ^^^^^^^^^^
AttributeError: 'bool' object has no attribute 'split'
>>> c=obj.values_list('productCategory'=='Laptop')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1392, in values_list
    clone = self._values(*_fields, **expressions)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1355, in _values
    clone.query.set_values(fields)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 2502, in set_values
    self.add_fields(field_names, True)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 2200, in add_fields
    name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m
    ^^^^^^^^^^
AttributeError: 'bool' object has no attribute 'split'
>>> c=obj.values_list('productCategory')
>>> c
<QuerySet [('Laptop',), ('Laptop',), ('Mobile',)]>
>>> c=obj.values_list('id', 'productCategory', 'productName', 'productPrice')
>>> c
<QuerySet [(1, 'Laptop', 'Dell W series', 50000.0), (2, 'Laptop', 'Macbook Pro M3', 200000.0), (3, 'Mobile', 'Samsung X series', 12000.0)]>
>>> obj.filter(productCategory='Mobile').delete()
(1, {'login.Product': 1})
>>> obj.filter(productCategory='Mobile')
<QuerySet []>
>>> obj.filter(productCategory='Mobile').insert()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'insert'
>>> obj
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>]>
>>> obj.create('abc','acc')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: QuerySet.create() takes 1 positional argument but 3 were given
>>> obj.create(productName='abc')
Traceback (most recent call last):
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\sqlite3\base.py", line 329, in execute
    return super().execute(query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: login_product.productPrice

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\base.py", line 822, in save
    self.save_base(
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\base.py", line 909, in save_base
    updated = self._save_table(
              ^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\base.py", line 1067, in _save_table
    results = self._do_insert(
              ^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\base.py", line 1108, in _do_insert
    return manager._insert(
           ^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 122, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 79, in execute
    return self._execute_with_wrappers(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "D:\django_project\testenv\Lib\site-packages\django\db\utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\backends\sqlite3\base.py", line 329, in execute
    return super().execute(query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
django.db.utils.IntegrityError: NOT NULL constraint failed: login_product.productPrice
>>> obj.create(productName='abc', producttPrice=500.00)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 677, in create
    obj = self.model(**kwargs)
          ^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\base.py", line 567, in __init__
    raise TypeError(
TypeError: Product() got unexpected keyword arguments: 'producttPrice'
>>> obj.create(productName='abc', productPrice=500.00)
<Product: abc  500.0  >
>>> obj
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: abc  500.0  >]>
>>> obj.get('id'=4)
  File "<console>", line 1
    obj.get('id'=4)
            ^^^^^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
>>> obj.get('id'==4)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 635, in get
    clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1476, in filter
    return self._filter_or_exclude(False, args, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1494, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1501, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1613, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1645, in _add_q
    child_clause, needed_inner = self.build_filter(
                                 ^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1492, in build_filter
    arg, value = filter_expr
    ^^^^^^^^^^
TypeError: cannot unpack non-iterable bool object
>>> obj.get(id=4)
<Product: abc  500.0  >
>>> obj.get(id=4).productPrice=600.00
>>> obj
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: abc  500.0  >]>
>>> obj.get(id=4).productPrice=600.00
>>> obj.save()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'save'
>>> obj.get(id=4).productPrice=600.00
>>> obj=obj.save()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'save'
>>> c=Product.objects.get(id=4)
>>> c
<Product: abc  500.0  >
>>> c.productPrice=600.0
>>> c.save()
>>> c
<Product: abc  600.0  >
>>> obj=Product.objects.all()
>>>
>>> obj
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: abc  600.0  >]>
>>> ^Z

now exiting InteractiveConsole...

(testenv) D:\django_project\musclenation>python manange.pt shell
C:\Users\DELL\AppData\Local\Programs\Python\Python311\python.exe: can't open file 'D:\\django_project\\musclenation\\manange.pt': [Errno 2] No such file or directory

(testenv) D:\django_project\musclenation>manage.ppython manage.py shell
'manage.ppython' is not recognized as an internal or external command,
operable program or batch file.

(testenv) D:\django_project\musclenation>python manage.py shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from Credentials.models import *
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ModuleNotFoundError: No module named 'Credentials'
>>> from login.models import *
>>> c=objects.getall()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'objects' is not defined
>>> c=Credentials.objects.all()
>>> c
<QuerySet [<Credentials: admin, admin>, <Credentials: test, test>]>
>>> q=Product.objects.all()
>>> q
<QuerySet [<Product: Dell W series Laptop 50000.0 Dell 1 year>, <Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>, <Product: abc  600.0  >]>
>>> q=Product.get ( 'productname')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Product' has no attribute 'get'
>>> q=Product.get('productname=dell')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Product' has no attribute 'get'
>>> c=Product.objects.get(id=4)
>>> c
<Product: abc  600.0  >
>>> c=Product.objects.get(id=2)
>>> c
<Product: Macbook Pro M3 Laptop 200000.0 Macbook pro 2 years>
>>> filter_C=Products.objects.all(productname=dell)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Products' is not defined
>>> filter_C=Products.objects.filter(productname= 'dell' )
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Products' is not defined
>>> filter_C=Product.objects.filter(productname= 'dell' ))
  File "<console>", line 1
    filter_C=Product.objects.filter(productname= 'dell' ))
                                                         ^
SyntaxError: unmatched ')'
>>> filter_C=Product.objects.filter(productname= 'dell' )
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1476, in filter
    return self._filter_or_exclude(False, args, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1494, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\query.py", line 1501, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1613, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1645, in _add_q
    child_clause, needed_inner = self.build_filter(
                                 ^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1495, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1307, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\django_project\testenv\Lib\site-packages\django\db\models\sql\query.py", line 1772, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'productname' into field. Choices are: id, productBrand, productCategory, productName, productPrice, productWarranty
>>> filter_C=Product.objects.filter(productName= 'Laptop' )
>>> filter_c
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'filter_c' is not defined
>>> filter_C
<QuerySet []>
>>> filter_C=Product.objects.filter(productName= 'Dumbell' )
>>> filter_C
<QuerySet [<Product: Dumbell 10-20 kg 600.0 PUMA 5 years>]>
>>> filter_C
<QuerySet [<Product: Dumbell MediumWeight 600.0 PUMA 5Years>]>
>>> a=Product.objects.filterQ(ProductWarranty=5Years
  File "<console>", line 1
    a=Product.objects.filterQ(ProductWarranty=5Years
                                              ^
SyntaxError: invalid decimal literal
>>> )